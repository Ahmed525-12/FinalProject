@using WebApplication1.ViewModel
@model CombinedHomeScreen
@{
    ViewData["Title"] = "Home Page";
}
 
<!-- main -->

<div class="arrow arrow--top ">
    <svg xmlns="http://www.w3.org/2000/svg" width="270.11" height="649.9" overflow="visible">
        <style>
            .geo-arrow {
                fill: none;
                stroke: #fff;
                stroke-width: 2;
                stroke-miterlimit: 10
            }
        </style>
        <g class="item-to bounce-1">
            <path class="geo-arrow draw-in" d="M135.06 142.564L267.995 275.5 135.06 408.434 2.125 275.499z" />
        </g>
        <circle class="geo-arrow item-to bounce-2" cx="194.65" cy="69.54" r="7.96" />
        <circle class="geo-arrow draw-in" cx="194.65" cy="39.5" r="7.96" />
        <circle class="geo-arrow item-to bounce-3" cx="194.65" cy="9.46" r="7.96" />
        <g class="geo-arrow item-to bounce-2">
            <path class="st0 draw-in" d="M181.21 619.5l13.27 27 13.27-27zM194.48 644.5v-552" />
        </g>
    </svg>
</div>
<div class="arrow arrow--bottom">
    <svg xmlns="http://www.w3.org/2000/svg" width="31.35" height="649.9" overflow="visible">
        <style>
            .geo-arrow {
                fill: none;
                stroke: #fff;
                stroke-width: 2;
                stroke-miterlimit: 10
            }
        </style>
        <g class="item-to bounce-1">
            <circle class="geo-arrow item-to bounce-3" cx="15.5" cy="580.36" r="7.96" />
            <circle class="geo-arrow draw-in" cx="15.5" cy="610.4" r="7.96" />
            <circle class="geo-arrow item-to bounce-2" cx="15.5" cy="640.44" r="7.96" />
            <g class="item-to bounce-2">
                <path class="geo-arrow draw-in" d="M28.94 30.4l-13.26-27-13.27 27zM15.68 5.4v552" />
            </g>
        </g>
    </svg>
</div>
        <div class="main">


    <div class="row pb-5 padding-fixed">
    <div class="col-lg-6 col-md-6 col-sm-12 text-center">
        <!-- Display User information -->
       
        <h1 class="">Hello and Welcome @Model.UserVM.DisplayName</h1>
        <!-- Add other user properties as needed -->
    
    </div>
    <div class="col-lg-6 col-md-6 col-sm-12 text-center">
        <!-- Display User information -->
       
        <h1 class=""> your total expense :<span><h1 class="">@Model.UserVM.TotalExpense</h1> </span></h1>

    </div>
        </div>
   
<br />
<hr />
@if (Model.UserVM != null && Model.UserVM.TotalExpense.HasValue && Model.SaveGoalVM != null && Model.SaveGoalVM.Any())
{
    foreach (var saveGoal in Model.SaveGoalVM)
    {
        int? totalExpense = Model.UserVM.TotalExpense;
        int targetAmount = saveGoal.TargetAmount;

  
        double progressPercentage = (double)totalExpense / targetAmount;
        var calacprogress = progressPercentage * 100;
        string formattedProgress = calacprogress.ToString("0.000");
        <div class="container">

      
        <div class="mb-3">
                <div class="pb-3">

            <p class="">Goal: @saveGoal.TitleGoal</p>
            </div>


            <div class="progress">
                <div class="progress-bar" role="progressbar" style="width: @calacprogress%;" aria-valuenow="@calacprogress" aria-valuemin="0" aria-valuemax="100">
                        @formattedProgress%
                </div>
            </div>
        </div>
          </div>
    }
}
else
{
    <p>No save goals or data available for the progress bars.</p>
}

<br />
<hr />@if (Model.MonthOfExpenseVM.Any())
{
 
     <div class="container ">
    <canvas id="myChart" width="400" height="150"></canvas>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var labels = [];
        var data = [];
        var totalSpent = [];
        var totalExpense = @Model.UserVM.TotalExpense;

        @foreach (var monthOfExpense in Model.MonthOfExpenseVM)
        {
            @:labels.push('@monthOfExpense.numOfMonth');
            @:data.push(@monthOfExpense.TotalAmountMoney);
            @:totalSpent.push(@Model.UserVM.TotalExpense);
        }

                var ctx = document.getElementById('myChart').getContext('2d');

        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Total Spent',
                    data: data,
                    backgroundColor: 'rgba(75, 192, 192, 0.5)', // Default color for Total Spent
                    borderColor: 'rgba(75, 192, 192, 1)', // Default border color for Total Spent
                    borderWidth: 1
                },
                {
                    label: 'Total Expense',
                    data: totalSpent,
                    backgroundColor: '#A5DD9B', // Color for Total Expense
                    borderColor: '#114232', // Border color for Total Expense
                    borderWidth: 1
                }]
            },
            options: {
                barPercentage: 0.8, // Adjust the width of the bars
                categoryPercentage: 0.8, // Adjust the width of the bars
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Total Spent vs Total Expense',
                        font: {
                            size: 20 // Change the font size here
                        }
                    }
                }
            }
        });
    </script>
}
else
{
    <p>No month of expenses found.</p>
}
</div>










